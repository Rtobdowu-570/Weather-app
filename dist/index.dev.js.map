{"version":3,"sources":["index.js"],"names":["cityInput","document","querySelector","searchButton","console","error","addEventListener","e","key","search","getCityCoordinates","cityName","callback","xhr","XMLHttpRequest","geo_url","encodeURIComponent","open","onload","status","geo_data","JSON","parse","responseText","results","length","location","name","country","latitude","longitude","onerror","send","getWeather","lat","lon","weather_url","weather_data","err","current_weather","value","trim","textContent","log","weatherData","cityEl","tempEl","descEl","windEl","temperature","weathercode","windspeed"],"mappings":"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","sourcesContent":["// DOM elements\nconst cityInput = document.querySelector('#cityInput');\nconst searchButton = document.querySelector('#searchButton');\n\nif (!cityInput || !searchButton) {\n    console.error('Required DOM elements not found: #cityInput or #searchButton');\n} else {\n    // allow Enter key to trigger search\n    cityInput.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') search();\n    });\n    // Create event listeners\n    searchButton.addEventListener('click', search);\n}\n\n// function convert city to coordinates\n    function getCityCoordinates(cityName, callback) {\n        const xhr = new XMLHttpRequest();\n        const geo_url =  `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(cityName)}&count=1`;\n\n        // Open a GET request\n        xhr.open('GET', geo_url, true)\n\n        // onload \n        xhr.onload = function() {\n            if (this.status === 200) {\n                const geo_data = JSON.parse(this.responseText);\n                if (geo_data.results && geo_data.results.length > 0) {\n                    const location = geo_data.results[0];\n                    callback(null, {\n                        name: location.name,\n                        country: location.country,\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    });\n            } else{\n                    callback('City not found', null);\n                }  \n            } else {\n                callback('Error: ' + this.status, null);\n            }\n        }\n\n        // on error \n        xhr.onerror = function() {\n            callback('Network error', null);\n        }\n\n        // Send the request\n        xhr.send();\n    }\n\n    // get weather data \n    function getWeather(lat, lon, callback) {\n        const xhr = new XMLHttpRequest();\n        const weather_url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`;\n\n        // Open a GET request\n        xhr.open('GET', weather_url, true);\n\n        // onload \n    xhr.onload = function() {\n            if(this.status === 200) {\n                let weather_data;\n                try {\n                    weather_data = JSON.parse(this.responseText);\n                } catch (err) {\n                    callback('Invalid JSON from weather API', null);\n                    return;\n                }\n\n                // ensure current_weather exists\n                if (weather_data && weather_data.current_weather) {\n                    callback(null, weather_data.current_weather);\n                } else {\n                    callback('No current_weather in response', null);\n                }\n            } else {\n                callback('Error: ' + this.status, null);\n            }\n        } \n\n        // on error \n        xhr.onerror = function() {\n            callback('Network error', null);\n        }\n\n        // Send the request\n        xhr.send();\n    }\n\n// search \nfunction search() {\n    const cityName = cityInput.value.trim();\n\n    getCityCoordinates(cityName, function(error, location) {\n        if (error) {\n            console.error(error);\n            document.querySelector('.city-name').textContent = 'Error: ' + error;\n            return;\n        } else {\n            console.log('Found:', location.name, location.country);\n\n            getWeather(location.latitude, location.longitude, function(error, weatherData) {\n                if (error) {\n                    console.error(error);\n                    document.querySelector('.city-name').textContent = 'Error: ' + error;\n                    return;\n                } else {\n\n                    // Display weather data (safe access)\n                    console.log('Weather Data:', weatherData);\n                    const cityEl = document.querySelector('.city-name');\n                    const tempEl = document.querySelector('.temperature');\n                    const descEl = document.querySelector('.description');\n                    const windEl = document.querySelector('.wind');\n\n                    if (cityEl) cityEl.textContent = `${location.name}, ${location.country}`;\n                    if (tempEl) tempEl.textContent = (weatherData && typeof weatherData.temperature !== 'undefined') ? `${weatherData.temperature}Â°C` : '--';\n                    if (descEl) descEl.textContent = (weatherData && typeof weatherData.weathercode !== 'undefined') ? `Weather Code: ${weatherData.weathercode}` : '';\n                    if (windEl) windEl.textContent = (weatherData && typeof weatherData.windspeed !== 'undefined') ? `Wind Speed: ${weatherData.windspeed} km/h` : '';\n                }\n            });\n        }\n    })\n\n    // Clear input field\n    cityInput.value = '';\n}"],"file":"index.dev.js"}