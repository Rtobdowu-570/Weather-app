{"version":3,"sources":["index.js"],"names":["cityInput","document","querySelector","searchButton","getCityCoordinates","cityName","callback","xhr","XMLHttpRequest","encodeURIComponent","open","geo_url","onload","status","geo_data","JSON","responseText","results","length","location","name","country","latitude","longitude","this","onerror","send","getWeather","lat","lon","weather_url","weather_data","err","current_weather","search","value","trim","error","console","textContent","weatherData","cityEl","tempEl","descEl","concat","temperature","weathercode","windEl","windspeed","addEventListener","e","key"],"mappings":"aACA,IAAMA,UAAYC,SAASC,cAAc,cADzCC,aAAAF,SAAAC,cAAA,iBAgBI,SAASE,mBAAmBC,EAAUC,GAClC,IAAMC,EAAM,IAAIC,eADXJ,EAAAA,uDAAAA,OAAuCK,mBAAAJ,GAAvCD,YAKLG,EAAIG,KAAK,MAAOC,GAAS,GAGrBC,EAAJA,OAAa,WACL,GAAqB,MAAhBC,KAALA,OAAqB,CACfC,IAAWC,EAAWA,KAAKC,MAAAA,KAAhBA,cACjB,GAAIF,EAASG,SAAqC,EAA1BH,EAASG,QAAQC,OAAY,CAAxCD,IAATE,EAAoBL,EAAAG,QAAA,GACNX,EAAGQ,KAASG,CACXG,KAAAD,EAAAC,KACGC,QADHF,EAAAE,QAEFF,SAASE,EAFPC,SAGDH,UAASG,EAHRC,iBAMjBjB,EAAA,iBAAA,WAGCA,EAAA,UAAAkB,KAAAX,OAAA,OAMXN,EAAIkB,QAAU,WAAVA,EAAU,gBAAW,OAKzBlB,EAAImB,OAIR,SAASC,WAAWC,EAAKC,EAAKvB,GAA9B,IAASqB,EAAWC,IAApBpB,eACgBsB,EAAItB,mDAAAA,OAAhBoB,EAAgBpB,eAAAA,OAAhBqB,EAAgBrB,yBAIZE,EAAKA,KAAT,MAAgBoB,GALoB,GAShCvB,EAAGK,OAAKC,WACAkB,GAAJ,MAAIA,KAAAA,OAAJ,CAAA,IAAIA,EACA,IACYA,EAAchB,KAAKC,MAAAA,KAAhBA,cACjB,MAAYgB,GAEV,YADS1B,EAAA,gCAAT,MAKAyB,GAAgBA,EAAaE,gBACpB3B,EAAMyB,KAAYA,EAACE,iBAEnB3B,EAAA,iCAAT,WAGKA,EAAA,UAAiBO,KAAQA,OAAlC,OAKJY,EAAAA,QAAU,WACFnB,EAAC,gBAAT,OAIAoB,EAAJA,OAIR,SAASQ,SAID9B,mBAHaJ,UAAUmC,MAAVC,OAGF,SAAAC,EAAAlB,GACPmB,GAAAA,EAGG,OAFHrC,QAASC,MAAAA,QACTD,SAAAC,cAAA,cAAAqC,YAAA,UAAAF,GAIAV,QAAWR,IAAAA,SAADA,EAAoBA,KAASI,EAAWF,SAE1CiB,WAAAnB,EAAAG,SAAAH,EAAAI,UAAA,SAAAc,EAAAG,GACAvC,GAASC,EAIT,OAHAoC,QAAAD,MAAAA,QACGpC,SAAAC,cAAA,cAAAqC,YAAA,UAAAF,GAMSC,QAAGrC,IAASC,gBAAcsC,GAC1B,IAAGvC,EAASC,SAAAA,cAAxB,cAEYuC,EAAOF,SAAPrC,cAAwBiB,gBACxBuB,EAAOH,SAAeC,cAAe,gBACrCG,EAAOJ,SAAeC,cAAe,SAEpDC,IAAAA,EAAAF,YAAA,GAAAK,OAAAzB,EAAAC,KAAA,MAAAwB,OAAAzB,EAAAE,UAlBLqB,IAAAA,EAAAH,YAAAC,QAAA,IAAAA,EAAAK,YAAA,GAAAD,OAAAJ,EAAAK,YAAA,MAAA,MAoBHF,IAAAA,EAAAJ,YAAAC,QAAA,IAAAA,EAAAM,YAAA,iBAAAF,OAAAJ,EAAAM,aAAA,IAGLC,IAAAA,EAAAR,YAAAC,QAAA,IAAAA,EAAAQ,UAAA,eAAAJ,OAAAJ,EAAAQ,UAAA,SAAA,QACAhD,UAAUmC,MAAQ,GA7HhBhC,WAAeF,cAErBD,UAEOiD,iBAAA,UAAA,SAAAC,GACH,UAAAA,EAAAC,KAAAjB,WACA/B,aAGA8C,iBAAA,QAAAf,SANAI,QAAQD,MAAM","file":"index.min.js","sourcesContent":["// DOM elements\nconst cityInput = document.querySelector('#cityInput');\nconst searchButton = document.querySelector('#searchButton');\n\nif (!cityInput || !searchButton) {\n    console.error('Required DOM elements not found: #cityInput or #searchButton');\n} else {\n    // allow Enter key to trigger search\n    cityInput.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') search();\n    });\n    // Create event listeners\n    searchButton.addEventListener('click', search);\n}\n\n// function convert city to coordinates\n    function getCityCoordinates(cityName, callback) {\n        const xhr = new XMLHttpRequest();\n        const geo_url =  `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(cityName)}&count=1`;\n\n        // Open a GET request\n        xhr.open('GET', geo_url, true)\n\n        // onload \n        xhr.onload = function() {\n            if (this.status === 200) {\n                const geo_data = JSON.parse(this.responseText);\n                if (geo_data.results && geo_data.results.length > 0) {\n                    const location = geo_data.results[0];\n                    callback(null, {\n                        name: location.name,\n                        country: location.country,\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    });\n            } else{\n                    callback('City not found', null);\n                }  \n            } else {\n                callback('Error: ' + this.status, null);\n            }\n        }\n\n        // on error \n        xhr.onerror = function() {\n            callback('Network error', null);\n        }\n\n        // Send the request\n        xhr.send();\n    }\n\n    // get weather data \n    function getWeather(lat, lon, callback) {\n        const xhr = new XMLHttpRequest();\n        const weather_url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`;\n\n        // Open a GET request\n        xhr.open('GET', weather_url, true);\n\n        // onload \n    xhr.onload = function() {\n            if(this.status === 200) {\n                let weather_data;\n                try {\n                    weather_data = JSON.parse(this.responseText);\n                } catch (err) {\n                    callback('Invalid JSON from weather API', null);\n                    return;\n                }\n\n                // ensure current_weather exists\n                if (weather_data && weather_data.current_weather) {\n                    callback(null, weather_data.current_weather);\n                } else {\n                    callback('No current_weather in response', null);\n                }\n            } else {\n                callback('Error: ' + this.status, null);\n            }\n        } \n\n        // on error \n        xhr.onerror = function() {\n            callback('Network error', null);\n        }\n\n        // Send the request\n        xhr.send();\n    }\n\n// search \nfunction search() {\n    const cityName = cityInput.value.trim();\n\n    getCityCoordinates(cityName, function(error, location) {\n        if (error) {\n            console.error(error);\n            document.querySelector('.city-name').textContent = 'Error: ' + error;\n            return;\n        } else {\n            console.log('Found:', location.name, location.country);\n\n            getWeather(location.latitude, location.longitude, function(error, weatherData) {\n                if (error) {\n                    console.error(error);\n                    document.querySelector('.city-name').textContent = 'Error: ' + error;\n                    return;\n                } else {\n\n                    // Display weather data (safe access)\n                    console.log('Weather Data:', weatherData);\n                    const cityEl = document.querySelector('.city-name');\n                    const tempEl = document.querySelector('.temperature');\n                    const descEl = document.querySelector('.description');\n                    const windEl = document.querySelector('.wind');\n\n                    if (cityEl) cityEl.textContent = `${location.name}, ${location.country}`;\n                    if (tempEl) tempEl.textContent = (weatherData && typeof weatherData.temperature !== 'undefined') ? `${weatherData.temperature}Â°C` : '--';\n                    if (descEl) descEl.textContent = (weatherData && typeof weatherData.weathercode !== 'undefined') ? `Weather Code: ${weatherData.weathercode}` : '';\n                    if (windEl) windEl.textContent = (weatherData && typeof weatherData.windspeed !== 'undefined') ? `Wind Speed: ${weatherData.windspeed} km/h` : '';\n                }\n            });\n        }\n    })\n\n    // Clear input field\n    cityInput.value = '';\n}"]}